from django.db import models
from thiet_bi.models import ThietBi
# Create your models here.
class Sensor(models.Model):
    device_id = models.ForeignKey(ThietBi, on_delete=models.CASCADE)
    ETH_MAC = models.CharField(max_length=100)
    name = models.CharField(max_length=100)
    # ID = models.IntegerField()
    unit = models.CharField(max_length=100)
    status = models.CharField(max_length=100)
    activation = models.CharField(max_length=100)
    monitor = models.CharField(max_length=100)
    monitor_unit = models.CharField(max_length=100)
    sum_index = models.IntegerField()
    sum_month_reset = models.IntegerField()
    sum_day_reset = models.IntegerField()
    sum_hour_reset = models.IntegerField()
    sum_minute_reset = models.IntegerField()
    sum_second_reset = models.IntegerField()
    sampling_time = models.IntegerField()
    raw_value = models.IntegerField()
    calib_value = models.IntegerField()
    log_name = models.CharField(max_length=100)
    protocol = models.CharField(max_length=100)
    data_type = models.CharField(max_length=100)
    modbus_TCP_IP_IP = models.CharField(max_length=100)
    modbus_TCP_IP_ID = models.CharField(max_length=100)
    modbus_TCP_IP_type = models.CharField(max_length=100)
    modbus_TCP_IP_address = models.CharField(max_length=100)
    modbus_TCP_IP_timeout = models.IntegerField()
    modbus_RTU_port_selection = models.CharField(max_length=100)
    modbus_RTU_baudrate = models.IntegerField()
    modbus_RTU_data_bits = models.IntegerField()
    modbus_RTU_stop_bits = models.IntegerField()
    modbus_RTU_parity = models.CharField(max_length=100)
    modbus_RTU_timeout = models.IntegerField()
    modbus_RTU_ID = models.IntegerField()
    modbus_RTU_type = models.CharField(max_length=100)
    modbus_RTU_address = models.IntegerField()
    virtual_function = models.CharField(max_length=100)
    virtual_sum_list = models.CharField(max_length=100)
    calib_function = models.CharField(max_length=100)
    calib_index_A = models.IntegerField()
    calib_index_B = models.IntegerField()
    calib_index_C = models.IntegerField()
    calib_index_D = models.IntegerField()
    alarm_status = models.CharField(max_length=100)
    alarm_activation = models.CharField(max_length=100)
    alarm_error_ignore = models.CharField(max_length=100)
    alarm_raw_lower = models.IntegerField()
    alarm_raw_upper = models.IntegerField()
    alarm_calib_lower = models.IntegerField()
    alarm_calib_upper = models.IntegerField()
    error_status = models.CharField(max_length=100)
    error_activation = models.CharField(max_length=100)
    error_raw_lower = models.IntegerField()
    error_raw_upper = models.IntegerField()
    error_calib_lower = models.IntegerField()
    error_calib_upper = models.IntegerField()
    limit_status = models.CharField(max_length=100)
    limit_activation = models.CharField(max_length=100)
    limit_upper = models.IntegerField()
    limit_lower = models.IntegerField()

class AlarmMidLevelList(models.Model):
    sensor_id = models.ForeignKey(Sensor, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    activate = models.CharField(max_length=100)
    type = models.CharField(max_length=100)
    value = models.IntegerField() 